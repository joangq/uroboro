module: ( DOCSTRING
        | COMMENT
        | import
        | struct_def
        | function_def
        | _NEWLINE )*


_AS: "as"
_FROM: "from"
_IMPORT: "import"
DOT: "."
WILDCARD: "*"

_import_name: NAME
import_alias: _AS NAME

_import_path: (_import_name ".")* _import_name

?import_list: _import_name [import_alias] ("," _import_name [import_alias] )* [","]
_import_from: _FROM (DOT* _import_path | DOT+)

import: _IMPORT DOT* _import_path [import_alias]
      | _import_from _IMPORT ( WILDCARD | _import_name [import_alias] )
      | _import_from _IMPORT "(" import_list ")"


decorators: ("@" NAME [ "(" [arguments] ")" ] _NEWLINE)+

parameter: NAME ":" type ["=" expr]
parameters: parameter ("," parameter?)*

_FUNC_DECL: "def"
_RETURN_TYPE: "->"
returns: _RETURN_TYPE type
function_sig: _FUNC_DECL NAME "(" [parameters] ")" [returns]
function_def: [decorators] function_sig ":" body

array_def: (NAME | array_def) "[" expr "]"
tuple_def: "(" ( NAME | array_def | tuple_def ) ( "," ( NAME | array_def | tuple_def ) )* [","] ")"

imported_type: NAME ("." NAME)+
type: ( NAME | imported_type | array_def | tuple_def )

_STRUCT_DECL: "struct"
struct_member: NAME ":" type
struct_def: _STRUCT_DECL NAME ":" _NEWLINE _INDENT (struct_member _NEWLINE)+ _DEDENT

_stmt: ( if_stmt | for_stmt ) [COMMENT]
     | (declaration
       | assign
       | return_stmt
       | pass_stmt
       | break_stmt
       | continue_stmt
       | raise_stmt
       | assert_stmt
       | expr ) [COMMENT] _NEWLINE

variable: NAME ":" type
declaration: variable ["=" expr]
skip_assign: "_"
multiple_assign: (atom_expr | skip_assign) ("," (atom_expr | skip_assign))+
assign: (atom_expr | multiple_assign | "(" multiple_assign ")" ) "=" expr

_PASS: "pass"
_BREAK: "break"
_CONTINUE: "continue"
_RETURN: "return"
_RAISE: "raise"
_ASSERT: "assert"

pass_stmt: _PASS
break_stmt: _BREAK
continue_stmt: _CONTINUE

return_stmt: _RETURN [expr ("," expr)*]

raise_stmt: _RAISE -> raise
          | _RAISE expr -> raise_with_reason

assert_stmt: _ASSERT expr -> assert
           | _ASSERT expr "," expr -> assert_with_reason

body: _NEWLINE _INDENT ([COMMENT] _NEWLINE | _stmt)+ _DEDENT
cond_exec: expr ":" body
default_exec: body
if_stmt: "if" cond_exec ("elif" cond_exec)* ["else" ":" default_exec]
loop_variable: NAME ":" type
loop_iterator: expr
for_stmt: "for" loop_variable "in" loop_iterator ":" body

arg: expr
kwarg: NAME "=" expr
?argument: (arg | kwarg)
arguments: argument ("," argument)* [","]

tuple: "(" "," ")" | "(" expr ( ("," expr)+ [","] | "," ) ")"
list: "[" "]" | "[" expr ("," expr)* [","] "]"
dict: "{" "}" | "{" (NAME ":" expr) ("," (NAME ":" expr))* [","] "}"


?expr: assignment_expr

?assignment_expr: ternary
                  | NAME ":=" assignment_expr

?ternary: bool_or
          | ternary "if" ternary "else" ternary

_AND: "and"
_OR: "or"
_NOT: "not"

?bool_or: bool_and
        | bool_or _OR  bool_and -> or

?bool_and: bool_not
         | bool_and _AND bool_not -> and

?bool_not: comparator
         | _NOT bool_not -> not

_POW: "**"
_SHL: "<<"
_SHR: ">>"
_BITAND: "&"
_BITOR: "|"
_BITXOR: "^"

_EQ: "=="
_NE: "!="
_LE: "<="
_GE: ">="
_IN: "in"

?comparator: bitwise_or
           | comparator "<" bitwise_or ->  lt
           | comparator ">" bitwise_or ->  gt
           | comparator _EQ bitwise_or ->  eq
           | comparator _NE bitwise_or ->  ne
           | comparator _LE bitwise_or ->  le
           | comparator _GE bitwise_or ->  ge
           | comparator _IN bitwise_or ->  in
           | comparator _NOT _IN bitwise_or ->  in

?bitwise_or : bitwise_xor
            | bitwise_or _BITOR  bitwise_xor -> bitor

?bitwise_xor: bitwise_and
            | bitwise_xor _BITXOR  bitwise_and -> bitxor

?bitwise_and: shift
            | bitwise_and _BITAND  shift -> bitand

?shift: summation
      | shift _SHL  summation -> shl
      | shift _SHR  summation -> shr

?summation: product
          | summation "+"  product -> add
          | summation "-"  product -> sub

?product: unary
        | product "*"  unary -> mul
        | product "/"  unary -> div
        | product "//" unary -> floordiv
        | product "%"  unary -> mod

?unary: power
       | "+"  power -> uadd
       | "-"  power -> usub
       | "~"  power -> invert

?power: atom_expr
      | atom_expr _POW  power -> pow

subscript: (atom_expr | list) "[" expr "]"
attribute: atom_expr "." NAME
call: atom_expr "(" [arguments] ")"
?atom_expr: NAME -> get_var
                | subscript
                | attribute
                | call
                | atom

?atom: literal
     | tuple
     | list
     | dict
     | "(" expr ")"

NAME: /[a-zA-Z_]\w*/
COMMENT: /#[^\n\r]*/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+

STRING: /b?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
DOCSTRING: /(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

DEC_NUMBER: /0|[1-9]\d*/i
HEX_NUMBER.2: /0x[\da-f]*/i
OCT_NUMBER.2: /0o[0-7]*/i
BIN_NUMBER.2 : /0b[0-1]*/i
FLOAT_NUMBER.2: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i

_number: DEC_NUMBER
       | HEX_NUMBER
       | BIN_NUMBER
       | OCT_NUMBER
       | FLOAT_NUMBER

BOOL.2: "True" | "False"

ELLIPSIS: "..."

?literal: ( _number | STRING | DOCSTRING | BOOL | ELLIPSIS)

%ignore /[\t \f]+/  
%ignore /\\[\t \f]*\r?\n/   
%ignore COMMENT
%declare _INDENT _DEDENT